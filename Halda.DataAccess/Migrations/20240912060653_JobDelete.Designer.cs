// <auto-generated />
using System;
using Halda.DataAccess.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Halda.DataAccess.Migrations
{
    [DbContext(typeof(HaldaDbContext))]
    [Migration("20240912060653_JobDelete")]
    partial class JobDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Halda.Core.Models.Applicant", b =>
                {
                    b.Property<string>("ApplicantId")
                        .HasColumnType("text")
                        .HasColumnName("applicantid");

                    b.Property<DateTime?>("DOB")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dob");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("text")
                        .HasColumnName("emergencycontact");

                    b.Property<string>("FatherName")
                        .HasColumnType("text")
                        .HasColumnName("fathername");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("JobApplicationId")
                        .HasColumnType("text")
                        .HasColumnName("jobapplicationid");

                    b.Property<string>("JobPostId")
                        .HasColumnType("text")
                        .HasColumnName("jobpostid");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text")
                        .HasColumnName("maritalstatus");

                    b.Property<string>("MotherName")
                        .HasColumnType("text")
                        .HasColumnName("mothername");

                    b.Property<string>("NID")
                        .HasColumnType("text")
                        .HasColumnName("nid");

                    b.Property<string>("Nationality")
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.Property<DateTime?>("PassportIssueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("passportissuedate");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text")
                        .HasColumnName("passportnumber");

                    b.Property<string>("PassportNumberWithoutUnderscores")
                        .HasColumnType("text")
                        .HasColumnName("passportnumberwithoutunderscores");

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("text")
                        .HasColumnName("primaryemail");

                    b.Property<string>("PrimaryMNo")
                        .HasColumnType("text")
                        .HasColumnName("primarymno");

                    b.Property<string>("Religion")
                        .HasColumnType("text")
                        .HasColumnName("religion");

                    b.Property<string>("SecMNo")
                        .HasColumnType("text")
                        .HasColumnName("secmno");

                    b.HasKey("ApplicantId")
                        .HasName("pk_applicants");

                    b.HasIndex("JobApplicationId")
                        .HasDatabaseName("ix_applicants_jobapplicationid");

                    b.HasIndex("JobPostId")
                        .HasDatabaseName("ix_applicants_jobpostid");

                    b.ToTable("applicants", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.ApplicantApplicationStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text")
                        .HasColumnName("applicantid");

                    b.Property<string>("JobPostId")
                        .HasColumnType("text")
                        .HasColumnName("jobpostid");

                    b.Property<string>("MilestoneId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("milestoneid");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_applicantapplicationstatus");

                    b.HasIndex("ApplicantId")
                        .HasDatabaseName("ix_applicantapplicationstatus_applicantid");

                    b.HasIndex("JobPostId")
                        .HasDatabaseName("ix_applicantapplicationstatus_jobpostid");

                    b.HasIndex("MilestoneId")
                        .HasDatabaseName("ix_applicantapplicationstatus_milestoneid");

                    b.ToTable("applicantapplicationstatus", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.ApplicantAssignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("applicantid");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("assignmentid");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("boolean")
                        .HasColumnName("issubmitted");

                    b.Property<string>("UploadedFilePath")
                        .HasColumnType("text")
                        .HasColumnName("uploadedfilepath");

                    b.HasKey("Id")
                        .HasName("pk_applicantsassignments");

                    b.HasIndex("ApplicantId")
                        .HasDatabaseName("ix_applicantsassignments_applicantid");

                    b.HasIndex("AssignmentId")
                        .HasDatabaseName("ix_applicantsassignments_assignmentid");

                    b.ToTable("applicantsassignments", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Assignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text")
                        .HasColumnName("applicantid");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("duedate");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("JobPostId")
                        .HasColumnType("text")
                        .HasColumnName("jobpostid");

                    b.Property<string>("Notice")
                        .HasColumnType("text")
                        .HasColumnName("notice");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_assignments");

                    b.HasIndex("ApplicantId")
                        .HasDatabaseName("ix_assignments_applicantid");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_assignments_companyid");

                    b.HasIndex("JobPostId")
                        .HasDatabaseName("ix_assignments_jobpostid");

                    b.ToTable("assignments", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Certification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateexpiry");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateissued");

                    b.Property<string>("IssuingOrganization")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issuingorganization");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ResumeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resumeid");

                    b.HasKey("Id")
                        .HasName("pk_certifications");

                    b.HasIndex("ResumeId")
                        .HasDatabaseName("ix_certifications_resumeid");

                    b.ToTable("certifications", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Company", b =>
                {
                    b.Property<string>("ComId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("comid");

                    b.Property<string>("Addvertise")
                        .HasColumnType("text")
                        .HasColumnName("addvertise");

                    b.Property<string>("AppKey")
                        .HasColumnType("text")
                        .HasColumnName("appkey");

                    b.Property<string>("BaseComId")
                        .HasColumnType("text")
                        .HasColumnName("basecomid");

                    b.Property<byte[]>("ComImageHeader")
                        .HasColumnType("bytea")
                        .HasColumnName("comimageheader");

                    b.Property<byte[]>("ComLogo")
                        .HasColumnType("bytea")
                        .HasColumnName("comlogo");

                    b.Property<byte[]>("ComSign")
                        .HasColumnType("bytea")
                        .HasColumnName("comsign");

                    b.Property<string>("CompanyAddressBangla")
                        .HasColumnType("text")
                        .HasColumnName("companyaddressbangla");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("text")
                        .HasColumnName("companycode");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasColumnName("companyname");

                    b.Property<string>("CompanyNameBangla")
                        .HasColumnType("text")
                        .HasColumnName("companynamebangla");

                    b.Property<string>("CompanySecretCode")
                        .HasColumnType("text")
                        .HasColumnName("companysecretcode");

                    b.Property<string>("CompanyShortName")
                        .HasColumnType("text")
                        .HasColumnName("companyshortname");

                    b.Property<string>("ContDesig")
                        .HasColumnType("text")
                        .HasColumnName("contdesig");

                    b.Property<string>("ContPerson")
                        .HasColumnType("text")
                        .HasColumnName("contperson");

                    b.Property<string>("CountryId")
                        .HasColumnType("text")
                        .HasColumnName("countryid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<int?>("DecimalField")
                        .HasColumnType("integer")
                        .HasColumnName("decimalfield");

                    b.Property<string>("HeaderFileExtension")
                        .HasColumnType("text")
                        .HasColumnName("headerfileextension");

                    b.Property<string>("HeaderImagePath")
                        .HasColumnType("text")
                        .HasColumnName("headerimagepath");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<bool?>("IsDoller")
                        .HasColumnType("boolean")
                        .HasColumnName("isdoller");

                    b.Property<bool?>("IsEPZ")
                        .HasColumnType("boolean")
                        .HasColumnName("isepz");

                    b.Property<bool?>("IsGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("isgroup");

                    b.Property<bool?>("IsInActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isinactive");

                    b.Property<bool?>("IsService")
                        .HasColumnType("boolean")
                        .HasColumnName("isservice");

                    b.Property<bool?>("IsShowCurrencySymbol")
                        .HasColumnType("boolean")
                        .HasColumnName("isshowcurrencysymbol");

                    b.Property<string>("LogoFileExtension")
                        .HasColumnType("text")
                        .HasColumnName("logofileextension");

                    b.Property<string>("LogoImagePath")
                        .HasColumnType("text")
                        .HasColumnName("logoimagepath");

                    b.Property<string>("PrimaryAddress")
                        .HasColumnType("text")
                        .HasColumnName("primaryaddress");

                    b.Property<string>("SecoundaryAddress")
                        .HasColumnType("text")
                        .HasColumnName("secoundaryaddress");

                    b.Property<string>("SignFileExtension")
                        .HasColumnType("text")
                        .HasColumnName("signfileextension");

                    b.Property<string>("SignImagePath")
                        .HasColumnType("text")
                        .HasColumnName("signimagepath");

                    b.Property<string>("comEmail")
                        .HasColumnType("text")
                        .HasColumnName("comemail");

                    b.Property<string>("comFax")
                        .HasColumnType("text")
                        .HasColumnName("comfax");

                    b.Property<string>("comPhone")
                        .HasColumnType("text")
                        .HasColumnName("comphone");

                    b.Property<string>("comPhone2")
                        .HasColumnType("text")
                        .HasColumnName("comphone2");

                    b.Property<string>("comWeb")
                        .HasColumnType("text")
                        .HasColumnName("comweb");

                    b.Property<bool?>("isBarcode")
                        .HasColumnType("boolean")
                        .HasColumnName("isbarcode");

                    b.Property<bool?>("isChequeDetails")
                        .HasColumnType("boolean")
                        .HasColumnName("ischequedetails");

                    b.Property<bool?>("isCorporate")
                        .HasColumnType("boolean")
                        .HasColumnName("iscorporate");

                    b.Property<bool?>("isIMEISale")
                        .HasColumnType("boolean")
                        .HasColumnName("isimeisale");

                    b.Property<bool?>("isMultiCurrency")
                        .HasColumnType("boolean")
                        .HasColumnName("ismulticurrency");

                    b.Property<bool?>("isMultiDebitCredit")
                        .HasColumnType("boolean")
                        .HasColumnName("ismultidebitcredit");

                    b.Property<bool?>("isMultipleWh")
                        .HasColumnType("boolean")
                        .HasColumnName("ismultiplewh");

                    b.Property<bool?>("isOldDue")
                        .HasColumnType("boolean")
                        .HasColumnName("isolddue");

                    b.Property<bool?>("isPOSprint")
                        .HasColumnType("boolean")
                        .HasColumnName("isposprint");

                    b.Property<bool?>("isProduct")
                        .HasColumnType("boolean")
                        .HasColumnName("isproduct");

                    b.Property<bool?>("isRestaurantSale")
                        .HasColumnType("boolean")
                        .HasColumnName("isrestaurantsale");

                    b.Property<bool?>("isShoeSale")
                        .HasColumnType("boolean")
                        .HasColumnName("isshoesale");

                    b.Property<bool?>("isShortcutSale")
                        .HasColumnType("boolean")
                        .HasColumnName("isshortcutsale");

                    b.Property<bool?>("isTouch")
                        .HasColumnType("boolean")
                        .HasColumnName("istouch");

                    b.Property<bool?>("isVoucherDistributionEntry")
                        .HasColumnType("boolean")
                        .HasColumnName("isvoucherdistributionentry");

                    b.HasKey("ComId")
                        .HasName("pk_companys");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_companys_countryid");

                    b.ToTable("companys", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Education", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("degree");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fieldofstudy");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institution");

                    b.Property<string>("ResumeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resumeid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.HasKey("Id")
                        .HasName("pk_educations");

                    b.HasIndex("ResumeId")
                        .HasDatabaseName("ix_educations_resumeid");

                    b.ToTable("educations", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.JobApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text")
                        .HasColumnName("applicantid");

                    b.Property<string>("ApplyingPosition")
                        .HasColumnType("text")
                        .HasColumnName("applyingposition");

                    b.Property<string>("BScCertificateUrl")
                        .HasColumnType("text")
                        .HasColumnName("bsccertificateurl");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("text")
                        .HasColumnName("certificateurl");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("text")
                        .HasColumnName("coverletter");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("text")
                        .HasColumnName("currentlocation");

                    b.Property<string>("CurrentSalary")
                        .HasColumnType("text")
                        .HasColumnName("currentsalary");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateApplied")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateapplied");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ExpectedSalary")
                        .HasColumnType("text")
                        .HasColumnName("expectedsalary");

                    b.Property<string>("Experience")
                        .HasColumnType("text")
                        .HasColumnName("experience");

                    b.Property<string>("GovtIdUrl")
                        .HasColumnType("text")
                        .HasColumnName("govtidurl");

                    b.Property<string>("HowDidYouKnow")
                        .HasColumnType("text")
                        .HasColumnName("howdidyouknow");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("JobPostId")
                        .HasColumnType("text")
                        .HasColumnName("jobpostid");

                    b.Property<string>("LinkedinProfileLink")
                        .HasColumnType("text")
                        .HasColumnName("linkedinprofilelink");

                    b.Property<string>("MScCertificateUrl")
                        .HasColumnType("text")
                        .HasColumnName("msccertificateurl");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<string>("PreviousJobCompanyName")
                        .HasColumnType("text")
                        .HasColumnName("previousjobcompanyname");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("text")
                        .HasColumnName("resumeurl");

                    b.Property<string>("SSCCertificateUrl")
                        .HasColumnType("text")
                        .HasColumnName("ssccertificateurl");

                    b.Property<string>("Skills")
                        .HasColumnType("jsonb")
                        .HasColumnName("skills");

                    b.Property<string>("TranscriptUrl")
                        .HasColumnType("text")
                        .HasColumnName("transcripturl");

                    b.Property<string>("University")
                        .HasColumnType("text")
                        .HasColumnName("university");

                    b.HasKey("Id")
                        .HasName("pk_jobapplications");

                    b.HasIndex("ApplicantId")
                        .HasDatabaseName("ix_jobapplications_applicantid");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_jobapplications_companyid");

                    b.HasIndex("JobPostId")
                        .HasDatabaseName("ix_jobapplications_jobpostid");

                    b.ToTable("jobapplications", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.JobDescriptionTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string[]>("Benefits")
                        .HasColumnType("text[]")
                        .HasColumnName("benefits");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<int?>("DefaultType")
                        .HasColumnType("integer")
                        .HasColumnName("defaulttype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text")
                        .HasColumnName("designationid");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("Job_Title")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<string[]>("OtherInfo")
                        .HasColumnType("text[]")
                        .HasColumnName("otherinfo");

                    b.Property<string[]>("Qulifications")
                        .HasColumnType("text[]")
                        .HasColumnName("qulifications");

                    b.Property<string[]>("Responsibility")
                        .HasColumnType("text[]")
                        .HasColumnName("responsibility");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string[]>("Skills")
                        .HasColumnType("text[]")
                        .HasColumnName("skills");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_jobdescriptiontemplates");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_jobdescriptiontemplates_companyid");

                    b.HasIndex("DesignationId")
                        .HasDatabaseName("ix_jobdescriptiontemplates_designationid");

                    b.ToTable("jobdescriptiontemplates", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.JobMileStone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<int?>("DefaultType")
                        .HasColumnType("integer")
                        .HasColumnName("defaulttype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsAssignment")
                        .HasColumnType("boolean")
                        .HasColumnName("isassignment");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("JobPostId")
                        .HasColumnType("text")
                        .HasColumnName("jobpostid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_jobmilestones");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_jobmilestones_companyid");

                    b.HasIndex("JobPostId")
                        .HasDatabaseName("ix_jobmilestones_jobpostid");

                    b.ToTable("jobmilestones", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.JobPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string[]>("Benefits")
                        .HasColumnType("text[]")
                        .HasColumnName("benefits");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text")
                        .HasColumnName("departmentid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text")
                        .HasColumnName("designationid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("IsCompleted")
                        .HasColumnType("text")
                        .HasColumnName("iscompleted");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string[]>("JobTags")
                        .HasColumnType("text[]")
                        .HasColumnName("jobtags");

                    b.Property<string[]>("JobTypes")
                        .HasColumnType("text[]")
                        .HasColumnName("jobtypes");

                    b.Property<DateOnly?>("LastDate")
                        .HasColumnType("date")
                        .HasColumnName("lastdate");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string[]>("OtherInformation")
                        .HasColumnType("text[]")
                        .HasColumnName("otherinformation");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publishdate");

                    b.Property<string[]>("Qualifications")
                        .HasColumnType("text[]")
                        .HasColumnName("qualifications");

                    b.Property<string[]>("Responsibilities")
                        .HasColumnType("text[]")
                        .HasColumnName("responsibilities");

                    b.Property<string>("SalaryMax")
                        .HasColumnType("text")
                        .HasColumnName("salarymax");

                    b.Property<string>("SalaryMin")
                        .HasColumnType("text")
                        .HasColumnName("salarymin");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string[]>("Skills")
                        .HasColumnType("text[]")
                        .HasColumnName("skills");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_jobposts");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_jobposts_companyid");

                    b.HasIndex("DesignationId")
                        .HasDatabaseName("ix_jobposts_designationid");

                    b.ToTable("jobposts", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Milestone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<int?>("DefaultType")
                        .HasColumnType("integer")
                        .HasColumnName("defaulttype");

                    b.Property<bool?>("IsAssignment")
                        .HasColumnType("boolean")
                        .HasColumnName("isassignment");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("JobDescriptionId")
                        .HasColumnType("text")
                        .HasColumnName("jobdescriptionid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_milestones");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_milestones_companyid");

                    b.HasIndex("JobDescriptionId")
                        .HasDatabaseName("ix_milestones_jobdescriptionid");

                    b.ToTable("milestones", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Onboarding.EmpEdu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("CertificationType")
                        .HasColumnType("integer")
                        .HasColumnName("certificationtype");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employeeid");

                    b.Property<DateOnly>("EndYear")
                        .HasColumnType("date")
                        .HasColumnName("endyear");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("grade");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institute");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<DateOnly>("StartYear")
                        .HasColumnType("date")
                        .HasColumnName("startyear");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subjectname");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_empedus");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_empedus_companyid");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_empedus_employeeid");

                    b.ToTable("empedus", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Onboarding.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dob");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text")
                        .HasColumnName("departmentid");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text")
                        .HasColumnName("designationid");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("text")
                        .HasColumnName("emergencycontact");

                    b.Property<string>("FatherName")
                        .HasColumnType("text")
                        .HasColumnName("fathername");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("FloorId")
                        .HasColumnType("text")
                        .HasColumnName("floorid");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("LineId")
                        .HasColumnType("text")
                        .HasColumnName("lineid");

                    b.Property<string>("MeritalStatus")
                        .HasColumnType("text")
                        .HasColumnName("meritalstatus");

                    b.Property<string>("MotherName")
                        .HasColumnType("text")
                        .HasColumnName("mothername");

                    b.Property<string>("NID")
                        .HasColumnType("text")
                        .HasColumnName("nid");

                    b.Property<string>("Nationality")
                        .HasColumnType("text")
                        .HasColumnName("nationality");

                    b.Property<DateTime?>("PassportIssueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("passportissuedate");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text")
                        .HasColumnName("passportnumber");

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("text")
                        .HasColumnName("primaryemail");

                    b.Property<string>("PrimaryMNo")
                        .HasColumnType("text")
                        .HasColumnName("primarymno");

                    b.Property<string>("Religion")
                        .HasColumnType("text")
                        .HasColumnName("religion");

                    b.Property<int?>("SalaryProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("salaryprofileid");

                    b.Property<string>("SecMNo")
                        .HasColumnType("text")
                        .HasColumnName("secmno");

                    b.Property<string>("SectionId")
                        .HasColumnType("text")
                        .HasColumnName("sectionid");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_employees_companyid");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_employees_departmentid");

                    b.HasIndex("DesignationId")
                        .HasDatabaseName("ix_employees_designationid");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("ix_employees_floorid");

                    b.HasIndex("LineId")
                        .HasDatabaseName("ix_employees_lineid");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_employees_sectionid");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Onboarding.EmployeeAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apartment");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employeeid");

                    b.Property<string>("Infotype")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("infotype");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_employeeaddresses");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_employeeaddresses_companyid");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_employeeaddresses_employeeid");

                    b.ToTable("employeeaddresses", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ResumeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resumeid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("ResumeId")
                        .HasDatabaseName("ix_projects_resumeid");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.RecruitmentVariable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<int?>("DefaultType")
                        .HasColumnType("integer")
                        .HasColumnName("defaulttype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_recruitmentvariables");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_recruitmentvariables_companyid");

                    b.ToTable("recruitmentvariables", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Resume", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("applicantid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("Id")
                        .HasName("pk_resumes");

                    b.HasIndex("ApplicantId")
                        .HasDatabaseName("ix_resumes_applicantid");

                    b.ToTable("resumes", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Proficiency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("proficiency");

                    b.Property<string>("ResumeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resumeid");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.HasIndex("ResumeId")
                        .HasDatabaseName("ix_skills_resumeid");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text")
                        .HasColumnName("departmentid");

                    b.Property<string>("DepartmentId1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("departmentid1");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text")
                        .HasColumnName("designationid");

                    b.Property<string>("DesignationId1")
                        .HasColumnType("text")
                        .HasColumnName("designationid1");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_companyid");

                    b.HasIndex("DepartmentId1")
                        .HasDatabaseName("ix_users_departmentid1");

                    b.HasIndex("DesignationId1")
                        .HasDatabaseName("ix_users_designationid1");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("citycode");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cityid");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cityname");

                    b.Property<string>("CountryId")
                        .HasColumnType("text")
                        .HasColumnName("countryid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stateid");

                    b.HasKey("Id")
                        .HasName("pk_citys");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_citys_countryid");

                    b.HasIndex("StateId")
                        .HasDatabaseName("ix_citys_stateid");

                    b.ToTable("citys", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("countryid");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("countrycode");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("countryname");

                    b.Property<string>("CountryShortName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("countryshortname");

                    b.Property<string>("CultureInfo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cultureinfo");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("currencyname");

                    b.Property<string>("CurrencyShortName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("currencyshortname");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("currencysymbol");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("DialCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("dialcode");

                    b.Property<string>("FlagClass")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("flagclass");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.HasKey("CountryId")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("DeptCode")
                        .HasColumnType("text")
                        .HasColumnName("deptcode");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deptname");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("LocalName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("localname");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_departments_companyid");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Designation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("DesigCode")
                        .HasColumnType("text")
                        .HasColumnName("desigcode");

                    b.Property<string>("DesigName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("designame");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("LocalName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("localname");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_designations");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_designations_companyid");

                    b.ToTable("designations", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Floor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<string>("FloorCode")
                        .HasColumnType("text")
                        .HasColumnName("floorcode");

                    b.Property<string>("FloorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("floorname");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("LocalName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("localname");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_floors");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_floors_companyid");

                    b.ToTable("floors", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Line", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("LineCode")
                        .HasColumnType("text")
                        .HasColumnName("linecode");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("linename");

                    b.Property<string>("LocalName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("localname");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_lines");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_lines_companyid");

                    b.ToTable("lines", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Section", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text")
                        .HasColumnName("companyid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("LocalName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("localname");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("SecCode")
                        .HasColumnType("text")
                        .HasColumnName("seccode");

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("secname");

                    b.Property<int?>("Serial")
                        .HasColumnType("integer")
                        .HasColumnName("serial");

                    b.Property<string>("UpdateByUserId")
                        .HasColumnType("text")
                        .HasColumnName("updatebyuserid");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_sections");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_sections_companyid");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.State", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("countryid");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statecode");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stateid");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("statename");

                    b.HasKey("Id")
                        .HasName("pk_states");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_states_countryid");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.VariableData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateadded");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdated");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("LocalName")
                        .HasColumnType("text")
                        .HasColumnName("localname");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_variabledata");

                    b.ToTable("variabledata", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.WorkExperience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<string>("ResumeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resumeid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.HasKey("Id")
                        .HasName("pk_workexperiences");

                    b.HasIndex("ResumeId")
                        .HasDatabaseName("ix_workexperiences_resumeid");

                    b.ToTable("workexperiences", (string)null);
                });

            modelBuilder.Entity("Halda.Core.Models.Applicant", b =>
                {
                    b.HasOne("Halda.Core.Models.JobApplication", null)
                        .WithMany("Applicants")
                        .HasForeignKey("JobApplicationId")
                        .HasConstraintName("fk_applicants_jobapplications_jobapplicationid");

                    b.HasOne("Halda.Core.Models.JobPost", null)
                        .WithMany("Applicants")
                        .HasForeignKey("JobPostId")
                        .HasConstraintName("fk_applicants_jobposts_jobpostid");
                });

            modelBuilder.Entity("Halda.Core.Models.ApplicantApplicationStatus", b =>
                {
                    b.HasOne("Halda.Core.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .HasConstraintName("fk_applicantapplicationstatus_applicants_applicantid");

                    b.HasOne("Halda.Core.Models.JobPost", "JobPost")
                        .WithMany()
                        .HasForeignKey("JobPostId")
                        .HasConstraintName("fk_applicantapplicationstatus_jobposts_jobpostid");

                    b.HasOne("Halda.Core.Models.JobMileStone", "JobMileStone")
                        .WithMany()
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_applicantapplicationstatus_jobmilestones_milestoneid");

                    b.Navigation("Applicant");

                    b.Navigation("JobMileStone");

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("Halda.Core.Models.ApplicantAssignment", b =>
                {
                    b.HasOne("Halda.Core.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_applicantsassignments_applicants_applicantid");

                    b.HasOne("Halda.Core.Models.Assignment", "Assignment")
                        .WithMany("ApplicantAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_applicantsassignments_assignments_assignmentid");

                    b.Navigation("Applicant");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Halda.Core.Models.Assignment", b =>
                {
                    b.HasOne("Halda.Core.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .HasConstraintName("fk_assignments_applicants_applicantid");

                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_assignments_companys_companyid");

                    b.HasOne("Halda.Core.Models.JobPost", "JobPost")
                        .WithMany()
                        .HasForeignKey("JobPostId")
                        .HasConstraintName("fk_assignments_jobposts_jobpostid");

                    b.Navigation("Applicant");

                    b.Navigation("Company");

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("Halda.Core.Models.Certification", b =>
                {
                    b.HasOne("Halda.Core.Models.Resume", "Resume")
                        .WithMany("Certifications")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_certifications_resumes_resumeid");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Halda.Core.Models.Company", b =>
                {
                    b.HasOne("Halda.Core.Models.Variable.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_companys_countries_countryid");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Halda.Core.Models.Education", b =>
                {
                    b.HasOne("Halda.Core.Models.Resume", "Resume")
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_educations_resumes_resumeid");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Halda.Core.Models.JobApplication", b =>
                {
                    b.HasOne("Halda.Core.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .HasConstraintName("fk_jobapplications_applicants_applicantid");

                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany("JobApplications")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_jobapplications_companys_companyid");

                    b.HasOne("Halda.Core.Models.JobPost", "JobPost")
                        .WithMany()
                        .HasForeignKey("JobPostId")
                        .HasConstraintName("fk_jobapplications_jobposts_jobpostid");

                    b.Navigation("Applicant");

                    b.Navigation("Company");

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("Halda.Core.Models.JobDescriptionTemplate", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_jobdescriptiontemplates_companys_companyid");

                    b.HasOne("Halda.Core.Models.Variable.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("fk_jobdescriptiontemplates_designations_designationid");

                    b.Navigation("Company");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("Halda.Core.Models.JobMileStone", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_jobmilestones_companys_companyid");

                    b.HasOne("Halda.Core.Models.JobPost", "JobPosts")
                        .WithMany("JobMileStones")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_jobmilestones_jobposts_jobpostid");

                    b.Navigation("Company");

                    b.Navigation("JobPosts");
                });

            modelBuilder.Entity("Halda.Core.Models.JobPost", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany("JobPosts")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_jobposts_companys_companyid");

                    b.HasOne("Halda.Core.Models.Variable.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("fk_jobposts_designations_designationid");

                    b.Navigation("Company");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("Halda.Core.Models.Milestone", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany("Milestones")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_milestones_companys_companyid");

                    b.HasOne("Halda.Core.Models.JobDescriptionTemplate", "JobDescriptionTemplate")
                        .WithMany("Milestones")
                        .HasForeignKey("JobDescriptionId")
                        .HasConstraintName("fk_milestones_jobdescriptiontemplates_jobdescriptionid");

                    b.Navigation("Company");

                    b.Navigation("JobDescriptionTemplate");
                });

            modelBuilder.Entity("Halda.Core.Models.Onboarding.EmpEdu", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_empedus_companys_companyid");

                    b.HasOne("Halda.Core.Models.Onboarding.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_empedus_employees_employeeid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Halda.Core.Models.Onboarding.Employee", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_employees_companys_companyid");

                    b.HasOne("Halda.Core.Models.Variable.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_employees_departments_departmentid");

                    b.HasOne("Halda.Core.Models.Variable.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("fk_employees_designations_designationid");

                    b.HasOne("Halda.Core.Models.Variable.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_employees_floors_floorid");

                    b.HasOne("Halda.Core.Models.Variable.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .HasConstraintName("fk_employees_lines_lineid");

                    b.HasOne("Halda.Core.Models.Variable.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .HasConstraintName("fk_employees_sections_sectionid");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Designation");

                    b.Navigation("Floor");

                    b.Navigation("Line");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Halda.Core.Models.Onboarding.EmployeeAddress", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_employeeaddresses_companys_companyid");

                    b.HasOne("Halda.Core.Models.Onboarding.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employeeaddresses_employees_employeeid");

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Halda.Core.Models.Project", b =>
                {
                    b.HasOne("Halda.Core.Models.Resume", "Resume")
                        .WithMany("Projects")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_resumes_resumeid");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Halda.Core.Models.RecruitmentVariable", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_recruitmentvariables_companys_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Halda.Core.Models.Resume", b =>
                {
                    b.HasOne("Halda.Core.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_resumes_applicants_applicantid");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("Halda.Core.Models.Skill", b =>
                {
                    b.HasOne("Halda.Core.Models.Resume", "Resume")
                        .WithMany("Skills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_skills_resumes_resumeid");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Halda.Core.Models.User", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companys_companyid");

                    b.HasOne("Halda.Core.Models.Variable.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_departments_departmentid1");

                    b.HasOne("Halda.Core.Models.Variable.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId1")
                        .HasConstraintName("fk_users_designations_designationid1");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.City", b =>
                {
                    b.HasOne("Halda.Core.Models.Variable.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_citys_countries_countryid");

                    b.HasOne("Halda.Core.Models.Variable.State", "StateCity")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_citys_states_stateid");

                    b.Navigation("Country");

                    b.Navigation("StateCity");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Department", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_departments_companys_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Designation", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany("Designations")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_designations_companys_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Floor", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_floors_companys_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Line", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_lines_companys_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Section", b =>
                {
                    b.HasOne("Halda.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_sections_companys_companyid");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.State", b =>
                {
                    b.HasOne("Halda.Core.Models.Variable.Country", "StateCountry")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_states_countries_countryid");

                    b.Navigation("StateCountry");
                });

            modelBuilder.Entity("Halda.Core.Models.WorkExperience", b =>
                {
                    b.HasOne("Halda.Core.Models.Resume", "Resume")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_workexperiences_resumes_resumeid");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Halda.Core.Models.Assignment", b =>
                {
                    b.Navigation("ApplicantAssignments");
                });

            modelBuilder.Entity("Halda.Core.Models.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Designations");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("Milestones");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Halda.Core.Models.JobApplication", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("Halda.Core.Models.JobDescriptionTemplate", b =>
                {
                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("Halda.Core.Models.JobPost", b =>
                {
                    b.Navigation("Applicants");

                    b.Navigation("JobMileStones");
                });

            modelBuilder.Entity("Halda.Core.Models.Resume", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("Educations");

                    b.Navigation("Projects");

                    b.Navigation("Skills");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Companies");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Halda.Core.Models.Variable.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
